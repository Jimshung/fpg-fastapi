name: FPG 自動化流程 (Python)
on:
  schedule:
    - cron: '0 0 * * 1-5'
  workflow_dispatch:

jobs:
  run-automation:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: 安裝 Chrome 和 ChromeDriver
        run: |
          sudo mkdir -p /etc/apt/sources.list.d
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable xvfb
          CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3 | cut -d '.' -f 1)
          wget -q "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}" -O chrome_version
          CHROMEDRIVER_VERSION=$(cat chrome_version)
          wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: 安裝 Python 依賴
        run: pip install -r requirements.txt

      - name: 設置環境變數
        run: |
          {
            echo "APP_NAME=FPG Automation"
            echo "DEBUG=True"
            echo "CHROME_DRIVER_PATH=/usr/local/bin/chromedriver"
            echo "HEADLESS_MODE=True"
            echo "BASE_URL=${{ secrets.BASE_URL }}"
            echo "LOGIN_URL=${{ secrets.LOGIN_URL }}"
            echo "USERNAME=${{ secrets.USERNAME }}"
            echo "PASSWORD=${{ secrets.PASSWORD }}"
            echo "AZURE_ENDPOINT=${{ secrets.AZURE_ENDPOINT }}"
            echo "AZURE_API_KEY=${{ secrets.AZURE_API_KEY }}"
          } > .env

      - name: 創建截圖目錄
        run: mkdir -p app/utils/screenshots

      - name: 執行搜尋腳本
        run: |
          xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" python -c '
          import asyncio
          from app.services.login_service import LoginService
          from app.models.schema import SearchRequest
          from datetime import date

          async def main():
              service = LoginService()
              today = date.today()
              params = SearchRequest(start_date=today, end_date=today)
              result = await service.search_bulletins(params)
              print(result)
              await service.cleanup()

          asyncio.run(main())
          '

      - name: 上傳結果
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: search-results
          path: |
            app/utils/screenshots/
            error.log
