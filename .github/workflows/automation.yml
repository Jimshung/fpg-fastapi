name: FPG 自動化流程 (Python)
on:
  schedule:
    - cron: '0 0 * * 1-5'
  workflow_dispatch:

jobs:
  run-automation:
    runs-on: ubuntu-latest
    steps:
      - name: 檢出程式碼
        uses: actions/checkout@v3

      - name: 設置 Python 環境
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 安裝系統依賴
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable xvfb

      - name: 安裝 Python 依賴
        run: |
          python -m pip install --upgrade pip
          # 創建並激活虛擬環境
          python -m venv .venv
          source .venv/bin/activate
          # 安裝依賴
          pip install -r requirements.txt

      - name: 設置環境變數
        run: |
          echo "APP_NAME=FPG Automation" >> .env
          echo "DEBUG=True" >> .env
          echo "CHROME_DRIVER_PATH=/usr/bin/chromedriver" >> .env
          echo "HEADLESS_MODE=True" >> .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "LOGIN_URL=${{ secrets.LOGIN_URL }}" >> .env
          echo "USERNAME=${{ secrets.FPG_USERNAME }}" >> .env
          echo "PASSWORD=${{ secrets.FPG_PASSWORD }}" >> .env
          echo "AZURE_ENDPOINT=${{ secrets.AZURE_ENDPOINT }}" >> .env
          echo "AZURE_API_KEY=${{ secrets.AZURE_API_KEY }}" >> .env

      - name: 下載 ChromeDriver
        run: |
          CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3 | cut -d '.' -f 1)
          wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROME_VERSION.0.6261.94/linux64/chromedriver-linux64.zip
          unzip chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver

      - name: 創建必要目錄
        run: |
          mkdir -p app/utils/screenshots

      - name: 執行自動化腳本
        run: |
          source .venv/bin/activate
          xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" python -m uvicorn app.main:app || {
            echo "腳本執行失敗，錯誤代碼: $?"
            echo "錯誤日誌:"
            cat error.log
            exit 1
          }

      - name: 上傳日誌和截圖
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: automation-artifacts
          path: |
            app/utils/screenshots/
            error.log
          if-no-files-found: warn
