name: FPG 自動化流程 (Python)
on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  run-automation:
    runs-on: ubuntu-latest
    env:
      BASE_URL: ${{ secrets.BASE_URL }}
      LOGIN_URL: ${{ secrets.LOGIN_URL }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      AZURE_ENDPOINT: ${{ secrets.AZURE_ENDPOINT }}
      AZURE_API_KEY: ${{ secrets.AZURE_API_KEY }}
      CHROME_DRIVER_PATH: /usr/local/bin/chromedriver
      TZ: 'Asia/Taipei'
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Setup Chrome and ChromeDriver
        run: |
          # 安裝 Chrome
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

          # 獲取 Chrome 版本
          CHROME_VERSION=$(google-chrome --version | cut -d " " -f3)

          # 下載對應版本的 ChromeDriver
          wget -q "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROME_VERSION/linux64/chromedriver-linux64.zip"
          unzip chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

          # 驗證安裝
          google-chrome --version
          chromedriver --version

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Create Screenshots directory
        run: mkdir -p app/utils/screenshots

      - name: Run automation script
        id: automation
        run: |
          # 設定時間
          echo "time=$(date '+%Y-%m-%d %H:%M')" >> $GITHUB_OUTPUT

          # 執行腳本並收集日誌
          python -m app.scripts.run_automation 2>&1 | tee automation.log

          # 處理日誌輸出
          {
            echo 'log<<ENDLOG'
            # 使用 awk 處理日誌，保留所有 INFO 和 ERROR 訊息
            awk '/INFO:|ERROR:/ {print}' automation.log
            echo 'ENDLOG'
          } >> $GITHUB_OUTPUT

          # 設定狀態
          if grep -q "處理完成" automation.log; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: 發送 Telegram 通知
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            *FPG 自動化流程執行報告* 🤖

            📊 *執行資訊*
            執行狀態: ${{ steps.automation.outputs.status == 'success' && '✅ 成功' || '❌ 失敗' }}
            執行時間: ${{ steps.automation.outputs.time }}
            觸發方式: ${{ github.event_name == 'schedule' && '⏰ 排程' || '🔄 手動' }}

            🔍 *執行日誌*:
            ```
            ${{ steps.automation.outputs.log }}
            ```

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: search-results
          path: |
            app/utils/screenshots/
            automation.log
            error.log
