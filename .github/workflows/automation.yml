name: FPG 自動化流程 (Python)
on:
  schedule:
    - cron: '0 0 * * 1-5'
  workflow_dispatch:

jobs:
  run-automation:
    runs-on: ubuntu-20.04
    env:
      BASE_URL: ${{ secrets.BASE_URL }}
      LOGIN_URL: ${{ secrets.LOGIN_URL }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      AZURE_ENDPOINT: ${{ secrets.AZURE_ENDPOINT }}
      AZURE_API_KEY: ${{ secrets.AZURE_API_KEY }}
      CHROME_DRIVER_PATH: /usr/local/bin/chromedriver
      TZ: 'Asia/Taipei'
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: 安裝 Chrome 和 ChromeDriver
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: 安裝 ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: 安裝 xvfb
        run: sudo apt-get install -y xvfb

      - name: 安裝 Python 依賴
        run: pip install -r requirements.txt

      - name: 創建截圖目錄
        run: mkdir -p app/utils/screenshots

      - name: 執行搜尋腳本
        id: search_script
        continue-on-error: true
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          start_time=$(date +%s)
          # 將輸出導向到檔案並同時保存到變數
          log_output=$(xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" python app/scripts/run_automation.py 2>&1 | tee automation.log)
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "duration=$duration" >> $GITHUB_OUTPUT

          # 獲取含有 app.services 的總行數
          filtered_log=$(echo "$log_output" | grep "app.services")
          total_lines=$(echo "$filtered_log" | wc -l)
          echo "total_lines=$total_lines" >> $GITHUB_OUTPUT

          # 根據總行數決定顯示策略
          if [ $total_lines -le 20 ]; then
            # 如果總行數少於等於20行，顯示全部
            log_summary=$(echo "$filtered_log" | awk '{
              split($2, time, ":")
              hour_min = time[1] ":" time[2]
              sub(/.*INFO - /, "")
              print hour_min " • " $0
            }')
          else
            # 如果超過20行，顯示頭尾和中間
            mid_point=$((total_lines / 2))
            log_summary=$(echo "$filtered_log" | awk '{
              split($2, time, ":")
              hour_min = time[1] ":" time[2]
              sub(/.*INFO - /, "")
              print hour_min " • " $0
            }' | (
              echo "【執行開始】"
              head -n 10
              echo "..."
              echo "【執行中】"
              tail -n +$((mid_point - 5)) | head -n 10
              echo "..."
              echo "【執行結束】"
              tail -n 10
            ))
          fi

          echo "log_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$log_summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 發送 Telegram 通知
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            *FPG 自動化流程執行報告* 🤖

            📊 *執行資訊*
            ${'-'.repeat(30)}
            *執行狀態*: ${{ job.status == 'success' && '✅ 成功' || '❌ 失敗' }}
            *執行時間*: ${{ steps.search_script.outputs.duration }} 秒
            *觸發方式*: ${{ github.event_name == 'schedule' && '⏰ 排程' || '🔄 手動' }}
            *執行分支*: ${{ github.ref_name }}
            *總日誌行數*: ${{ steps.search_script.outputs.total_lines }} 行
            ${'-'.repeat(30)}

            📝 *執行日誌摘要*:
            ```
            ${{ steps.search_script.outputs.log_summary }}
            ```

            ${{ job.status != 'success' && '*❌ 錯誤詳情*: 請查看執行記錄' || '' }}

            [📋 查看詳細執行記錄](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: 上傳結果
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: search-results
          path: |
            app/utils/screenshots/
            automation.log
            error.log
